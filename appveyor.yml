environment: {}
install:
- C:\MinGW\bin\mingw-get update
- C:\MinGW\bin\mingw-get install flex
- C:\MinGW\bin\mingw-get install bison
- C:\MinGW\bin\mingw-get install gperf
- mkdir c:\Qt5.5.0\
- copy *.bat c:\Qt5.5.0\
- cd c:\Qt5.5.0\
- dir
- mkdir icu
- curl -O http://tenet.dl.sourceforge.net/project/icu/ICU4C/55.1/icu4c-55_1-src.zip
- cd icu
- 7z x ..\icu4c-55_1-src.zip
- cd ..
- mkdir openssl
- curl -O https://www.openssl.org/source/openssl-1.0.2h.tar.gz
- 7z x openssl-1.0.2h.tar.gz
- cd openssl
- 7z x ..\openssl-1.0.2h.tar
- cd ..\
- mkdir qt5
- curl -O http://qt.mirror.constant.com/archive/qt/5.5/5.5.0/single/qt-everywhere-opensource-src-5.5.0.zip
- cd qt5
- 7z x ..\qt-everywhere-opensource-src-5.5.0.zip
- cd ..

build_script:
- call c:\qt\buildicu.bat
- call c:\qt\buildopenssl.bat
- call c:\qt\buildqt.bat

test_script:
  # Put your test command here.
  # If you don't need to build C extensions on 64-bit Python 3.3 or 3.4,
  # you can remove "build.cmd" from the front of the command, as it's
  # only needed to support those cases.
  # Note that you must use the environment variable %PYTHON% to refer to
  # the interpreter you're using - Appveyor does not do anything special
  # to put the Python evrsion you want to use on PATH.
#  - "build.cmd %PYTHON%\\python.exe setup.py test"

after_test:
  # This step builds your wheels.
  # Again, you only need build.cmd if you're building C extensions for
  # 64-bit Python 3.3/3.4. And you need to use %PYTHON% to get the correct
  # interpreter
#  - "build.cmd %PYTHON%\\python.exe setup.py bdist_wheel"

# artifacts:
 # bdist_wheel puts your built wheel in the dist directory
#  - path: dist\*

#on_success:
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.
